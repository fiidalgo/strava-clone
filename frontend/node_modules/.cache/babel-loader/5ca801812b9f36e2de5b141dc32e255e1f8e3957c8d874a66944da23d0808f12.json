{"ast":null,"code":"var _jsxFileName = \"/home/nico/code/strava-clone/frontend/src/components/FitnessScoreChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nfunction FitnessScoreChart({\n  range\n}) {\n  _s();\n  const [fitnessScores, setFitnessScores] = useState([]);\n\n  // Fetch fitness scores based on selected range\n  useEffect(() => {\n    const fetchFitnessScores = async () => {\n      try {\n        const token = localStorage.getitem('token');\n        const res = await axios.get('http://localhost:5000/api/user/fitness-scores', {\n          headers: {\n            'x-auth-token': token\n          },\n          params: {\n            range // Send selected range as query parameter\n          }\n        });\n\n        // Set fitness scores in state\n        setFitnessScores(res.data);\n      } catch (err) {\n        console.error('Error fetching fitness scores:', err);\n      }\n    };\n    fetchFitnessScores();\n  }, [range]);\n\n  // Prepare data for chart\n  const chartData = {\n    labels: fitnessScores.map(score => score.date),\n    datasets: [{\n      label: 'Fitness Score',\n      data: fitnessScores.map(score => score.fitnessScore),\n      fill: true,\n      backgroundColor: 'rgba(75,192,192,0.2)',\n      borderColor: 'rgba(75,192,192,1)'\n    }]\n  };\n\n  // Chart options for displaying data\n  const chartOptions = {\n    scales: {\n      y: {\n        beginAtZero: true,\n        suggestedMax: 100\n      },\n      x: {\n        type: 'category',\n        ticks: {\n          maxRotation: 45,\n          minRotation: 45\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Fitness Score Over Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n_s(FitnessScoreChart, \"SHibjjOxjLfFQ/OzfPaGpPZS1IA=\");\n_c = FitnessScoreChart;\nexport default FitnessScoreChart;\nvar _c;\n$RefreshReg$(_c, \"FitnessScoreChart\");","map":{"version":3,"names":["React","useState","useEffect","axios","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","jsxDEV","_jsxDEV","register","FitnessScoreChart","range","_s","fitnessScores","setFitnessScores","fetchFitnessScores","token","localStorage","getitem","res","get","headers","params","data","err","console","error","chartData","labels","map","score","date","datasets","label","fitnessScore","fill","backgroundColor","borderColor","chartOptions","scales","y","beginAtZero","suggestedMax","x","type","ticks","maxRotation","minRotation","children","fileName","_jsxFileName","lineNumber","columnNumber","options","_c","$RefreshReg$"],"sources":["/home/nico/code/strava-clone/frontend/src/components/FitnessScoreChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport {\n    Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\n\nChartJS.register(\n    CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend\n);\n\nfunction FitnessScoreChart({ range }) {\n    const [fitnessScores, setFitnessScores] = useState([]);\n\n    // Fetch fitness scores based on selected range\n    useEffect(() => {\n        const fetchFitnessScores = async () => {\n            try {\n                const token = localStorage.getitem('token');\n                const res = await axios.get('http://localhost:5000/api/user/fitness-scores', {\n                    headers: {\n                        'x-auth-token': token\n                    },\n                    params: {\n                        range // Send selected range as query parameter\n                    }\n                });\n\n                // Set fitness scores in state\n                setFitnessScores(res.data);\n            } catch (err) {\n                console.error('Error fetching fitness scores:', err);\n            }\n        };\n\n        fetchFitnessScores();\n    }, [range]);\n\n    // Prepare data for chart\n    const chartData = {\n        labels: fitnessScores.map(score => score.date),\n        datasets: [\n            {\n                label: 'Fitness Score',\n                data: fitnessScores.map(score => score.fitnessScore),\n                fill: true,\n                backgroundColor: 'rgba(75,192,192,0.2)',\n                borderColor: 'rgba(75,192,192,1)',\n            }\n        ]\n    };\n\n    // Chart options for displaying data\n    const chartOptions = {\n        scales: {\n            y: {\n                beginAtZero: true,\n                suggestedMax: 100\n            },\n            x: {\n                type: 'category',\n                ticks: {\n                    maxRotation: 45,\n                    minRotation: 45\n                }\n            }\n        }\n    };\n\n    return (\n        <div>\n            <h3>Fitness Score Over Time</h3>\n            <Line data={chartData} options={chartOptions} />\n        </div>\n    );\n}\n\nexport default FitnessScoreChart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SACIC,KAAK,IAAIC,OAAO,EAAEC,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,QAC5F,UAAU;AACjB,SAASC,IAAI,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvCV,OAAO,CAACW,QAAQ,CACZV,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAC3E,CAAC;AAED,SAASK,iBAAiBA,CAAC;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EAClC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;;EAEtD;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMoB,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,MAAMC,GAAG,GAAG,MAAMvB,KAAK,CAACwB,GAAG,CAAC,+CAA+C,EAAE;UACzEC,OAAO,EAAE;YACL,cAAc,EAAEL;UACpB,CAAC;UACDM,MAAM,EAAE;YACJX,KAAK,CAAC;UACV;QACJ,CAAC,CAAC;;QAEF;QACAG,gBAAgB,CAACK,GAAG,CAACI,IAAI,CAAC;MAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEF,GAAG,CAAC;MACxD;IACJ,CAAC;IAEDT,kBAAkB,CAAC,CAAC;EACxB,CAAC,EAAE,CAACJ,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMgB,SAAS,GAAG;IACdC,MAAM,EAAEf,aAAa,CAACgB,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC;IAC9CC,QAAQ,EAAE,CACN;MACIC,KAAK,EAAE,eAAe;MACtBV,IAAI,EAAEV,aAAa,CAACgB,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACI,YAAY,CAAC;MACpDC,IAAI,EAAE,IAAI;MACVC,eAAe,EAAE,sBAAsB;MACvCC,WAAW,EAAE;IACjB,CAAC;EAET,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG;IACjBC,MAAM,EAAE;MACJC,CAAC,EAAE;QACCC,WAAW,EAAE,IAAI;QACjBC,YAAY,EAAE;MAClB,CAAC;MACDC,CAAC,EAAE;QACCC,IAAI,EAAE,UAAU;QAChBC,KAAK,EAAE;UACHC,WAAW,EAAE,EAAE;UACfC,WAAW,EAAE;QACjB;MACJ;IACJ;EACJ,CAAC;EAED,oBACIvC,OAAA;IAAAwC,QAAA,gBACIxC,OAAA;MAAAwC,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChC5C,OAAA,CAACF,IAAI;MAACiB,IAAI,EAAEI,SAAU;MAAC0B,OAAO,EAAEf;IAAa;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEd;AAACxC,EAAA,CAhEQF,iBAAiB;AAAA4C,EAAA,GAAjB5C,iBAAiB;AAkE1B,eAAeA,iBAAiB;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}