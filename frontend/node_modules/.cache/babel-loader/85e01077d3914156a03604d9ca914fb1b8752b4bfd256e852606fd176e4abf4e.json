{"ast":null,"code":"var _jsxFileName = \"/home/nico/code/strava-clone/frontend/src/components/FitnessScoreChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nfunction FitnessScoreChart({\n  range\n}) {\n  _s();\n  const [fitnessScores, setFitnessScores] = useState([]);\n\n  // Fetch fitness scores based on selected range\n  useEffect(() => {\n    fetchFitnessScores();\n  }, [range]);\n  const fetchFitnessScores = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const res = await axios.get('http://localhost:5000/api/user/fitness-scores', {\n        headers: {\n          'x-auth-token': token\n        },\n        params: {\n          range\n        }\n      });\n      console.log('Fetched fitness scores:', res.data);\n      const processedScores = processFitnessScores(res.data, range);\n      console.log('Processed fitness scores:', processedScores);\n      setFitnessScores(processedScores);\n    } catch (err) {\n      console.error('Error fetching fitness scores:', err);\n    }\n  };\n  const processFitnessScores = (data, range) => {\n    const endDate = new Date();\n    let startDate;\n    switch (range) {\n      case '7D':\n        startDate = new Date(endDate);\n        startDate.setDate(startDate.getDate() - 7);\n        break;\n      case '1M':\n        startDate = new Date(endDate);\n        startDate.setMonth(startDate.getMonth() - 1);\n        break;\n      case '3M':\n        startDate = new Date(endDate);\n        startDate.setMonth(startDate.getMonth() - 3);\n        break;\n      case '6M':\n        startDate = new Date(endDate);\n        startDate.setMonth(startDate.getMonth() - 6);\n        break;\n      case '1Y':\n        startDate = new Date(endDate);\n        startDate.setFullYear(startDate.getFullYear() - 1);\n        break;\n      default:\n        startDate = new Date(endDate);\n        startDate.setDate(startDate.getDate() - 7);\n    }\n    const dateMap = {};\n    data.forEach(score => {\n      const scoreDate = new Date(score.date);\n      scoreDate.setDate(scoreDate.getDate() + 1);\n      const dateStr = scoreDate.toDateString();\n      dateMap[dateStr] = score.fitnessScore;\n      console.log(`Processed date: ${dateStr}, Fitness score: ${score.fitnessScore}`);\n    });\n    const dates = [];\n    for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {\n      const dateStr = new Date(d).toDateString();\n      dates.push({\n        date: dateStr,\n        fitnessScore: dateMap[dateStr] || 0\n      });\n      console.log(`Final date: ${dateStr}, Final fitness score: ${dateMap[dateStr] || 0}`);\n    }\n    return dates;\n  };\n\n  // Prepare data for chart\n  const chartData = {\n    labels: fitnessScores.map(score => score.date),\n    datasets: [{\n      label: 'Fitness Score',\n      data: fitnessScores.map(score => score.fitnessScore),\n      fill: 'origin',\n      backgroundColor: 'rgba(75,192,192,0.2)',\n      borderColor: 'rgba(75,192,192,1)'\n    }]\n  };\n\n  // Chart options for displaying data\n  const chartOptions = {\n    scales: {\n      y: {\n        beginAtZero: true,\n        suggestedMax: 100\n      },\n      x: {\n        type: 'category',\n        ticks: {\n          maxRotation: 45,\n          minRotation: 45\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Fitness Score Over Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n}\n_s(FitnessScoreChart, \"SHibjjOxjLfFQ/OzfPaGpPZS1IA=\");\n_c = FitnessScoreChart;\nexport default FitnessScoreChart;\nvar _c;\n$RefreshReg$(_c, \"FitnessScoreChart\");","map":{"version":3,"names":["React","useState","useEffect","axios","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","jsxDEV","_jsxDEV","register","FitnessScoreChart","range","_s","fitnessScores","setFitnessScores","fetchFitnessScores","token","localStorage","getItem","res","get","headers","params","console","log","data","processedScores","processFitnessScores","err","error","endDate","Date","startDate","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","dateMap","forEach","score","scoreDate","date","dateStr","toDateString","fitnessScore","dates","d","push","chartData","labels","map","datasets","label","fill","backgroundColor","borderColor","chartOptions","scales","y","beginAtZero","suggestedMax","x","type","ticks","maxRotation","minRotation","children","fileName","_jsxFileName","lineNumber","columnNumber","options","_c","$RefreshReg$"],"sources":["/home/nico/code/strava-clone/frontend/src/components/FitnessScoreChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport {\n    Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\n\nChartJS.register(\n    CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend\n);\n\nfunction FitnessScoreChart({ range }) {\n    const [fitnessScores, setFitnessScores] = useState([]);\n\n    // Fetch fitness scores based on selected range\n    useEffect(() => {\n        fetchFitnessScores();\n    }, [range]);\n\n    const fetchFitnessScores = async () => {\n        try {\n            const token = localStorage.getItem('token');\n            const res = await axios.get('http://localhost:5000/api/user/fitness-scores', {\n                headers: {\n                    'x-auth-token': token\n                },\n                params: {\n                    range\n                }\n            });\n\n            console.log('Fetched fitness scores:', res.data)\n\n            const processedScores = processFitnessScores(res.data, range);\n\n            console.log('Processed fitness scores:', processedScores);\n\n            setFitnessScores(processedScores);\n        } catch (err) {\n            console.error('Error fetching fitness scores:', err)\n        }\n    };\n\n    const processFitnessScores = (data, range) => { \n        const endDate = new Date();\n        let startDate;\n\n        switch (range) {\n            case '7D':\n                startDate = new Date(endDate);\n                startDate.setDate(startDate.getDate() - 7);\n                break;\n            case '1M':\n                startDate = new Date(endDate);\n                startDate.setMonth(startDate.getMonth() - 1);\n                break;\n            case '3M':\n                startDate = new Date(endDate);\n                startDate.setMonth(startDate.getMonth() - 3);\n                break;\n            case '6M':\n                startDate = new Date(endDate);\n                startDate.setMonth(startDate.getMonth() - 6);\n                break;\n            case '1Y':\n                startDate = new Date(endDate);\n                startDate.setFullYear(startDate.getFullYear() - 1);\n                break;\n            default:\n                startDate = new Date(endDate);\n                startDate.setDate(startDate.getDate() - 7);\n        }\n\n        const dateMap = {};\n        data.forEach(score => {\n            const scoreDate = new Date(score.date);\n            scoreDate.setDate(scoreDate.getDate() + 1);\n            const dateStr = scoreDate.toDateString();\n            dateMap[dateStr] = score.fitnessScore;\n\n            console.log(`Processed date: ${dateStr}, Fitness score: ${score.fitnessScore}`);\n        });\n\n        const dates = [];\n        for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {\n            const dateStr = new Date(d).toDateString();\n            dates.push({\n                date: dateStr,\n                fitnessScore: dateMap[dateStr] || 0\n            });\n            console.log(`Final date: ${dateStr}, Final fitness score: ${dateMap[dateStr] || 0}`);\n        }\n\n        return dates;\n    };\n\n    // Prepare data for chart\n    const chartData = {\n        labels: fitnessScores.map(score => score.date),\n        datasets: [\n            {\n                label: 'Fitness Score',\n                data: fitnessScores.map(score => score.fitnessScore),\n                fill: 'origin',\n                backgroundColor: 'rgba(75,192,192,0.2)',\n                borderColor: 'rgba(75,192,192,1)',\n            }\n        ]\n    };\n\n    // Chart options for displaying data\n    const chartOptions = {\n        scales: {\n            y: {\n                beginAtZero: true,\n                suggestedMax: 100\n            },\n            x: {\n                type: 'category',\n                ticks: {\n                    maxRotation: 45,\n                    minRotation: 45\n                }\n            }\n        }\n    };\n\n    return (\n        <div>\n            <h3>Fitness Score Over Time</h3>\n            <Line data={chartData} options={chartOptions} />\n        </div>\n    );\n}\n\nexport default FitnessScoreChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}